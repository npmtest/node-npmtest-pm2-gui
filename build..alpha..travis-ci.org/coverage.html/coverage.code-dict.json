{"/home/travis/build/npmtest/node-npmtest-pm2-gui/test.js":"/* istanbul instrument in package npmtest_pm2_gui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/lib.npmtest_pm2_gui.js":"/* istanbul instrument in package npmtest_pm2_gui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pm2_gui = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pm2_gui = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pm2-gui && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pm2_gui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pm2_gui\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pm2_gui.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_pm2_gui.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pm2_gui.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_pm2_gui.__dirname +\n                    '/lib.npmtest_pm2_gui.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/pm2-gui.js":"var chalk = require('chalk')\nvar path = require('path')\nvar fs = require('fs')\nvar _ = require('lodash')\nvar socketIO = require('socket.io')\nvar inquirer = require('inquirer')\nvar Monitor = require('./lib/monitor')\nvar Log = require('./lib/util/log')\nvar Web = require('./web/index')\nvar layout = require('./lib/blessed-widget/layout')\n\nif (path.basename(process.mainModule.filename, '.js') === 'pm2-gui') {\n  var cmd, file\n  if (process.argv.length > 2) {\n    cmd = process.argv[2]\n  }\n  if (process.argv.length > 3) {\n    file = process.argv[3]\n  }\n  cmd = cmd || 'start'\n\n  switch (cmd) {\n    case 'start':\n      startWebServer(file)\n      break\n    case 'agent':\n      startAgent(file)\n      break\n    case 'mon':\n      dashboard(file)\n      break\n    default:\n      Log({\n        level: 0,\n        prefix: true\n      })\n      console.error('Command', cmd, 'is not supported!')\n      break\n  }\n}\n\nexports.startWebServer = startWebServer\nexports.startAgent = startAgent\nexports.dashboard = dashboard\nexports.exitGraceful = exitGraceful\n\nfunction startWebServer (confFile) {\n  var monitor = slave({\n    confFile: confFile\n  })\n  var options = monitor.options\n\n  options.port = options.port || 8088\n  var server = Web({\n    middleware: function (req, res, next) {\n      req._config = options\n      next()\n    },\n    port: options.port\n  })\n\n  monitor.sockio = socketIO(server, {\n    origins: options.origins || '*:*'\n  })\n  monitor.run()\n  console.info('Web server is listening on 127.0.0.1:' + options.port)\n}\n\nfunction startAgent (confFile) {\n  var monitor = slave({\n    confFile: confFile\n  })\n\n  var options = monitor.options\n  options.agent = options.agent || {}\n  if (options.agent.offline) {\n    console.error('Agent is offline, can not start it.')\n    return process.exit(0)\n  }\n  options.port = options.port || 8088\n  var sockio = socketIO()\n  sockio.listen(options.port, {\n    origins: options.origins || '*:*'\n  })\n  monitor.sockio = sockio\n  monitor.run()\n  console.info('Socket.io server is listening on 0.0.0.0:' + options.port)\n}\n\nfunction dashboard (confFile) {\n  // restore cursor\n  process.on('exit', function () {\n    process.stdout.write('\\u001b[?25h')\n  })\n  var monitor = slave({\n    confFile: confFile\n  })\n  var options = _.clone(monitor.options)\n  var q = Monitor.available(options)\n\n  if (!q) {\n    console.error('No agent is online, can not start it.')\n    return process.exit(0)\n  }\n  var ql = q.choices.length\n  if (ql === 1) {\n    if (q.choices[0].short !== 'localhost') {\n      console.info('There is just one remoting server online, try to connect it.')\n    }\n    return _connectToDashboard(monitor, options, Monitor.parseConnectionString(q.choices[0].value))\n  }\n  if (!options.agent || !options.agent.offline) {\n    q.choices.splice(ql - 1, 0, new inquirer.Separator())\n  }\n\n  console.info('Remoting servers are online, choose one you are intrested in.')\n  console.log('')\n  inquirer.prompt(q).then(function (answers) {\n    console.log('')\n    _connectToDashboard(monitor, options, Monitor.parseConnectionString(answers.socket_server))\n  })\n}\n\nfunction exitGraceful (code, signal) {\n  code = code || 0\n  if (signal !== '-f') {\n    console.debug('Slave has exited, code: ' + code + ', signal: ' + (signal || 'NULL'))\n  }\n  var fds = 0\n\n  function tryToExit () {\n    if ((fds & 1) && (fds & 2)) {\n      process.exit(code)\n    }\n  }\n\n  [process.stdout, process.stderr].forEach(function (std) {\n    var fd = std.fd\n    if (!std.bufferSize) {\n      fds = fds | fd\n    } else {\n      std.write && std.write('', function () {\n        fds = fds | fd\n        tryToExit()\n      })\n    }\n  })\n  tryToExit()\n}\n\nfunction slave (options) {\n  process.title = 'pm2-gui slave'\n  options = options || {}\n  var confFile = options.confFile\n  if (!confFile) {\n    confFile = path.resolve(__dirname, './pm2-gui.ini')\n\n    if (!fs.existsSync(confFile)) {\n      console.error(chalk.bold(confFile), 'does not exist!')\n      return process.exit(0)\n    }\n  }\n  var monitor = Monitor({\n    confFile: confFile\n  })\n\n  Log(monitor.options.log)\n\n  console.log(chalk.cyan(\n    '\\n' +\n    '█▀▀█ █▀▄▀█ █▀█ ░░ ▒█▀▀█ ▒█░▒█ ▀█▀\\n' +\n    '█░░█ █░▀░█ ░▄▀ ▀▀ ▒█░▄▄ ▒█░▒█ ▒█░\\n' +\n    '█▀▀▀ ▀░░░▀ █▄▄ ░░ ▒█▄▄█ ░▀▄▄▀ ▄█▄\\n'))\n\n  process.on('SIGTERM', shutdown)\n  process.on('SIGINT', shutdown)\n  process.on('SIGHUP', restart)\n  process.on('uncaughtException', caughtException)\n  process.on('exit', exitGraceful)\n\n  function shutdown (code, signal) {\n    console.info('Shutting down....')\n    monitor.quit()\n    console.info('Shutdown complete!')\n    exitGraceful(code, '-f')\n  }\n\n  function restart () {\n    if (process.send) {\n      process.send({\n        action: 'restart'\n      })\n    } else {\n      console.error('No IPC found, could not restart monitor, shutting down.')\n      shutdown(1)\n    }\n  }\n\n  function caughtException (err) {\n    console.error(err.stack)\n    shutdown(1)\n  }\n\n  return monitor\n}\n\nfunction _connectToDashboard (monitor, options, connection) {\n  connection = _.extend({}, options, connection)\n  if (!!~['127.0.0.1', '0.0.0.0', 'localhost'].indexOf(connection.hostname)) { // eslint-disable-line no-extra-boolean-cast\n    return monitor.connect(connection, function (socket) {\n      console.info('Agent is online, try to connect it in dashboard directly.')\n      layout(connection).render(monitor)\n    }, function (err, socket) {\n      if (err === 'unauthorized') {\n        console.error('There was an error with the authentication:', err)\n        return process.exit(0)\n      }\n      console.warn('Agent is offline, try to start it.')\n      var sockio = socketIO()\n      sockio.listen(connection.port, {\n        origins: options.origins || '*:*'\n      })\n      monitor.sockio = sockio\n      monitor.run()\n      layout(connection).render(monitor)\n    })\n  }\n\n  layout(connection).render(monitor)\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/monitor.js":"var fs = require('fs')\nvar path = require('path')\nvar _ = require('lodash')\nvar chalk = require('chalk')\nvar ansiHTML = require('ansi-html')\nvar totalmem = require('os').totalmem()\nvar pidusage = require('pidusage')\nvar url = require('url')\nvar socketIOClient = require('socket.io-client')\nvar pm = require('./pm')\nvar stat = require('./stat')\nvar conf = require('./util/conf')\nvar Log = require('./util/log')\nvar defConf\n\nmodule.exports = Monitor\n\n/**\n * Monitor of project monitor web.\n * @param options\n * @returns {Monitor}\n * @constructor\n */\nfunction Monitor (options) {\n  if (!(this instanceof Monitor)) {\n    return new Monitor(options)\n  }\n\n  // Initialize...\n  this._init(options)\n}\n\nMonitor.ACCEPT_KEYS = ['pm2', 'refresh', 'daemonize', 'readonly', 'max_restarts', 'port', 'log', 'agent', 'remotes', 'origins']\nMonitor.DEF_CONF_FILE = 'pm2-gui.ini'\nMonitor.PM2_DAEMON_PROPS = ['DAEMON_RPC_PORT', 'DAEMON_PUB_PORT']\n\n/**\n * Run socket.io server.\n */\nMonitor.prototype.run = function () {\n  this._noClient = true\n\n  this._tails = {}\n  this._usages = {}\n\n  // Observe PM2\n  this._observePM2()\n\n  this._listeningSocketIO()\n}\n\n/**\n * Quit monitor.\n * @return {[type]} [description]\n */\nMonitor.prototype.quit = function () {\n  if (this.pm2Sock) {\n    console.debug('Closing pm2 pub emitter socket.')\n    this.pm2Sock.close()\n  }\n  if (this._sockio) {\n    console.debug('Closing socket.io server.')\n    this._sockio.close()\n\n    console.debug('Destroying tails.')\n    this._killTailProcess()\n  }\n}\n\n/**\n * Connect to socket.io server.\n * @param  {String} ns the namespace.\n * @param  {Function} success\n * @param  {Function} failure\n */\nMonitor.prototype.connect = function (options, success, failure) {\n  if (!options.port) {\n    throw new Error('Port is required!')\n  }\n  var serverUri = Monitor.toConnectionString(options)\n\n  success = _.once(success)\n  failure = _.once(failure)\n\n  console.info('Connecting to', serverUri)\n  var socket = socketIOClient(serverUri)\n  socket.on('connect', function () {\n    success(socket)\n  })\n\n  socket.on('error', function (err) {\n    !failure(err, socket)\n  })\n\n  socket.on('connect_error', function (err) {\n    !failure(err, socket)\n  })\n}\n\n/**\n * Resolve home path.\n * @param {String} pm2Home\n * @returns {*}\n * @private\n */\nMonitor.prototype._resolveHome = function (pm2Home) {\n  if (pm2Home && pm2Home.indexOf('~/') === 0) {\n    // Get root directory of PM2.\n    pm2Home = process.env.PM2_HOME || path.resolve(process.env.HOME || process.env.HOMEPATH, pm2Home.substr(2))\n\n    // Make sure exist.\n    if (!pm2Home || !fs.existsSync(pm2Home)) {\n      throw new Error('PM2 root can not be located, try to initialize PM2 by executing `pm2 ls` or set environment variable vi `export PM2_HOME=[ROOT]`.')\n    }\n  }\n  return pm2Home\n}\n\n/**\n * Initialize options and configurations.\n * @private\n */\nMonitor.prototype._init = function (options) {\n  options = options || {}\n\n  defConf = conf.File(options.confFile || path.resolve(__dirname, '..', Monitor.DEF_CONF_FILE)).loadSync().valueOf()\n  defConf = _.pick.call(null, defConf, Monitor.ACCEPT_KEYS)\n\n  options = _.pick.apply(options, Monitor.ACCEPT_KEYS).valueOf()\n  options = _.defaults(options, defConf)\n\n  options.pm2 = this._resolveHome(options.pm2)\n  Log(options.log)\n\n  // Load PM2 config.\n  var pm2ConfPath = path.join(options.pm2, 'conf.js')\n  var fbMsg = ''\n  try {\n    options.pm2Conf = require(pm2ConfPath)(options.pm2)\n    if (!options.pm2Conf) {\n      throw new Error(404)\n    }\n  } catch (err) {\n    fbMsg = 'Can not load PM2 config, the file \"' + pm2ConfPath + '\" does not exist or empty, fallback to auto-load by pm2 home. '\n    console.warn(fbMsg)\n    options.pm2Conf = {\n      DAEMON_RPC_PORT: path.resolve(options.pm2, 'rpc.sock'),\n      DAEMON_PUB_PORT: path.resolve(options.pm2, 'pub.sock'),\n      PM2_LOG_FILE_PATH: path.resolve(options.pm2, 'pm2.log')\n    }\n  }\n\n  Monitor.PM2_DAEMON_PROPS.forEach(function (prop) {\n    var val = options.pm2Conf[prop]\n    if (!val || !fs.existsSync(val)) {\n      throw new Error(fbMsg + 'Unfortunately ' + (val || prop) + ' can not found, please makesure that your pm2 is running and the home path is correct.')\n    }\n  })\n\n  // Bind socket.io server to context.\n  if (options.sockio) {\n    this.sockio = options.sockio\n    delete options.sockio\n  }\n\n  // Bind to context.\n  this.options = options\n  Object.freeze(this.options)\n}\n\n/**\n * Connection event of `sys` namespace.\n * @param {Socket} socket\n * @private\n */\nMonitor.prototype._connectSysSock = function (socket) {\n  var self = this\n  // Still has one client connects to server at least.\n  self._noClient = false\n\n  socket.on('disconnect', function () {\n    // Check connecting client.\n    self._noClient = self._sockio.of(conf.NSP.SYS).sockets.length === 0\n  })\n\n  // Trigger actions of process.\n  socket.on('action', function (action, id) {\n    var prefix = '[pm2:' + id + ']'\n    console.debug(prefix, action, 'sending to pm2 daemon...')\n    if (self.options.readonly) {\n      console.warn(prefix, 'denied, readonly!')\n      return socket.emit('action', id, 'Can not complete the action due to denied by server, it is readonly!')\n    }\n    pm.action(self.options.pm2Conf.DAEMON_RPC_PORT, action, id, function (err, forceRefresh) {\n      if (err) {\n        console.error(action, err.message)\n        return socket.emit('action', id, 'Can not complete the action due to ' + err.message)\n      }\n      console.debug(prefix, action, 'completed!')\n      forceRefresh && self._throttleRefresh()\n    })\n  })\n  sendProcs()\n  socket.on('procs', sendProcs)\n  self._pm2Ver(socket)\n  this._sysStat && this._broadcast('system_stat', this._sysStat)\n\n  // Grep system states once and again.\n  if (this._status !== 'R') {\n    this._nextTick(this.options.refresh || 5000)\n  }\n\n  function sendProcs () {\n    self._procs && socket.emit(typeof self._procs === 'string' ? 'info' : 'procs', self._procs)\n  }\n}\n\n/**\n * Connection event of `log` namespace.\n * @param {socket.io} socket\n * @private\n */\nMonitor.prototype._connectLogSock = function (socket) {\n  var self = this\n\n  // Emit error.\n  function emitError (err, pmId, keepANSI) {\n    var data = {\n      pm_id: pmId,\n      msg: keepANSI ? chalk.red(err.message) : '<span style=\"color: #ff0000\">Error: ' + err.message + '</span>'\n    }\n    self._broadcast.call(self, 'log', data, conf.NSP.LOG) // eslint-disable-line no-useless-call\n  }\n\n  function startTailProcess (pmId, keepANSI) {\n    socket._pm_id = pmId\n\n    if (self._tails[pmId]) {\n      return\n    }\n\n    // Tail logs.\n    pm.tail({\n      sockPath: self.options.pm2Conf.DAEMON_RPC_PORT,\n      logPath: self.options.pm2Conf.PM2_LOG_FILE_PATH,\n      pm_id: pmId\n    }, function (err, lines) {\n      if (err) {\n        return emitError(err, pmId, keepANSI)\n      }\n      // Emit logs to clients.\n      var data = {\n        pm_id: pmId,\n        msg: lines.map(function (line) {\n          if (!keepANSI) {\n            line = line.replace(/\\s/, '&nbsp;')\n            return '<span>' + ansiHTML(line) + '</span>'\n          } else {\n            return line\n          }\n        }).join(keepANSI ? '\\n' : '')\n      }\n      self._broadcast.call(self, 'log', data, conf.NSP.LOG) // eslint-disable-line no-useless-call\n    }, function (err, tail) {\n      if (err) {\n        return emitError(err, pmId, keepANSI)\n      }\n      if (!tail) {\n        return emitError(new Error('No log can be found.'), pmId, keepANSI)\n      }\n\n      console.info('[pm2:' + pmId + ']', 'tail starting...')\n      self._tails[pmId] = tail\n    })\n  }\n\n  socket.on('disconnect', self._killTailProcess.bind(self))\n  socket.on('tail_kill', self._killTailProcess.bind(self))\n  socket.on('tail', startTailProcess)\n  console.info('Connected to ' + socket.nsp.name + '!')\n}\n\n/**\n * Connection event of `proc` namespace.\n * @param {socket.io} socket\n * @private\n */\nMonitor.prototype._connectProcSock = function (socket) {\n  var self = this\n  // Emit error.\n  function emitError (err, pid) {\n    var data = {\n      pid: pid,\n      msg: '<span style=\"color: #ff0000\">Error: ' + err.message + '</span>'\n    }\n    self._broadcast.call(self, 'proc', data, conf.NSP.PROC) // eslint-disable-line no-useless-call\n  }\n\n  function killObserver () {\n    var socks = self._sockio.of(conf.NSP.PROC).sockets\n    var canNotBeDeleted = {}\n\n    if (Array.isArray(socks) && socks.length > 0) {\n      socks.forEach(function (sock) {\n        if (sock._pid) {\n          canNotBeDeleted[sock._pid.toString()] = 1\n        }\n      })\n    }\n\n    for (var pid in self._usages) {\n      var timer\n      if (!canNotBeDeleted[pid] && (timer = self._usages[pid])) {\n        clearInterval(timer)\n        delete self._usages[pid]\n        console.debug('[pid:' + pid + ']', 'cpu and memory observer destroyed!')\n      }\n    }\n  }\n\n  function runObserver (pid) {\n    socket._pid = pid\n\n    var pidStr = pid.toString()\n    if (self._usages[pidStr]) {\n      return\n    }\n\n    console.debug('[pid:' + pidStr + ']', 'cpu and memory observer is running...')\n\n    function runTimer () {\n      pidusage.stat(pid, function (err, stat) {\n        if (err) {\n          clearInterval(self._usages[pidStr])\n          delete self._usages[pidStr]\n          return emitError.call(self, err, pid)\n        }\n        stat.memory = stat.memory * 100 / totalmem\n\n        var data = {\n          pid: pid,\n          time: Date.now(),\n          usage: stat\n        }\n        self._broadcast.call(self, 'proc', data, conf.NSP.PROC) // eslint-disable-line no-useless-call\n      })\n    }\n\n    self._usages[pidStr] = setInterval(runTimer, 3000)\n    runTimer(this)\n  }\n\n  socket.on('disconnect', killObserver)\n  socket.on('proc', runObserver)\n  console.info('Connected to ' + socket.nsp.name + '!')\n}\n\n/**\n * Grep system state loop\n * @param {Number} tick\n * @private\n */\nMonitor.prototype._nextTick = function (tick, continuously) {\n  // Return it if worker is running.\n  if (this._status === 'R' && !continuously) {\n    return\n  }\n  // Running\n  this._status = 'R'\n  console.debug('monitor heartbeat per', tick + 'ms')\n  // Grep system state\n  this._systemStat(function () {\n    // If there still has any client, grep again after `tick` ms.\n    if (!this._noClient) {\n      return setTimeout(this._nextTick.bind(this, tick, true), tick)\n    }\n    // Stop\n    delete this._status\n    console.debug('monitor heartbeat destroyed!')\n  })\n}\n\n/**\n * Grep system states.\n * @param {Function} cb\n * @private\n */\nMonitor.prototype._systemStat = function (cb) {\n  stat.cpuUsage(function (err, cpuUsage) {\n    if (err) {\n      // Log only.\n      console.error('Can not load system/cpu/memory information: ', err.message)\n    } else {\n      // System states.\n      this._sysStat = _.defaults(_(stat).pick('cpus', 'arch', 'hostname', 'platform', 'release', 'uptime', 'memory').clone(), {\n        cpu: cpuUsage\n      })\n      this._broadcast.call(this, 'system_stat', this._sysStat) // eslint-disable-line no-useless-call\n    }\n    cb.call(this)\n  }, this)\n}\n\n/**\n * Observe PM2\n * @private\n */\nMonitor.prototype._observePM2 = function () {\n  var pm2Daemon = this.options.pm2Conf.DAEMON_PUB_PORT\n  console.info('Connecting to pm2 daemon:', pm2Daemon)\n  this.pm2Sock = pm.sub(pm2Daemon, function (data) {\n    console.info(chalk.magenta(data.event), data.process.name + '-' + data.process.pm_id)\n    this._throttleRefresh()\n  }, this)\n\n  // Enforce a refresh operation if RPC is not online.\n  this._throttleRefresh()\n}\n\n/**\n * Throttle the refresh behavior to avoid refresh bomb\n * @private\n */\nMonitor.prototype._throttleRefresh = function () {\n  if (this._throttle) {\n    clearTimeout(this._throttle)\n  }\n  this._throttle = setTimeout(function (ctx) {\n    ctx._throttle = null\n    ctx._refreshProcs()\n  }, 500, this)\n}\n\n/**\n * Refresh processes\n * @private\n */\nMonitor.prototype._refreshProcs = function () {\n  pm.list(this.options.pm2Conf.DAEMON_RPC_PORT, function (err, procs) {\n    if (err) {\n      return this._broadcast('info', 'Can not connect to pm2 daemon, ' + err.message)\n    }\n    // Wrap processes and cache them.\n    this._procs = procs.map(function (proc) {\n      proc.pm2_env = proc.pm2_env || {\n        USER: 'UNKNOWN'\n      }\n      var pm2Env = {\n        user: proc.pm2_env.USER\n      }\n\n      for (var key in proc.pm2_env) {\n        // Ignore useless fields.\n        if (key.slice(0, 1) === '_' ||\n          key.indexOf('axm_') === 0 || !!~['versioning', 'command'].indexOf(key) ||\n          key.charCodeAt(0) <= 90) {\n          continue\n        }\n        pm2Env[key] = proc.pm2_env[key]\n      }\n      proc.pm2_env = pm2Env\n      return proc\n    })\n    // Emit to client.\n    this._broadcast('procs', this._procs)\n  }, this)\n}\n\n/**\n * Get PM2 version and return it to client.\n * @private\n */\nMonitor.prototype._pm2Ver = function (socket) {\n  var pm2RPC = this.options.pm2Conf.DAEMON_RPC_PORT\n  console.info('Fetching pm2 version:', pm2RPC)\n  pm.version(pm2RPC, function (err, version) {\n    socket.emit('pm2_ver', (err || !version) ? '0.0.0' : version)\n  })\n}\n\n/**\n * Broadcast to all connected clients.\n * @param {String} event\n * @param {Object} data\n * @param {String} nsp\n * @private\n */\nMonitor.prototype._broadcast = function (event, data, nsp) {\n  nsp = nsp || conf.NSP.SYS\n\n  if (this._noClient) {\n    return console.debug('No client is connecting, ignore broadcasting', event, 'to', nsp)\n  }\n  console.debug('Broadcasting', event, 'to', nsp)\n  this._sockio.of(nsp).emit(event, data)\n}\n\n/**\n * Destroy tails.\n * @param  {Number} pm_id\n * @return {[type]}\n */\nMonitor.prototype._killTailProcess = function (pmId) {\n  var self = this\n\n  function killTail (id) {\n    var tail = self._tails[id]\n    if (!tail) {\n      return\n    }\n    try {\n      tail.kill('SIGTERM')\n    } catch (err) {}\n\n    delete self._tails[id]\n    console.info('[pm2:' + id + ']', 'tail destroyed!')\n  }\n  if (!isNaN(pmId)) {\n    return killTail(pmId)\n  }\n\n  var socks = self._sockio.of(conf.NSP.LOG).sockets\n  var canNotBeDeleted = {}\n  if (socks && socks.length > 0) {\n    socks.forEach(function (sock) {\n      canNotBeDeleted[sock._pm_id] = 1\n    })\n  }\n\n  for (var _id in self._tails) {\n    if (!canNotBeDeleted[_id]) {\n      killTail(_id)\n    }\n  }\n}\n\n/**\n * Listening all the nsp.\n */\nMonitor.prototype._listeningSocketIO = function () {\n  if (!this._sockio || this._sockio._listening) {\n    console.warn('Avoid duplicated listening!')\n    return\n  }\n\n  this._sockio._listening = true\n  for (var nsp in conf.NSP) {\n    this._sockio.of(conf.NSP[nsp]).on('connection', this['_connect' + (nsp[0] + nsp.toLowerCase().slice(1)) + 'Sock'].bind(this))\n    console.info('Listening connection event on', nsp.toLowerCase())\n  }\n\n  var auth\n  if (!(this.options.agent && (auth = this.options.agent.authorization))) {\n    return\n  }\n  this._sockio.use(function (socket, next) {\n    if (auth !== socket.handshake.query.auth) {\n      return next(new Error('unauthorized'))\n    }\n    next()\n  })\n}\n\n/**\n * List all available monitors.\n * @param  {Object} options\n * @return {Object}\n */\nMonitor.available = function (options) {\n  options.agent = options.agent || {}\n  var remotable = options.remotes && _.keys(options.remotes).length > 0\n\n  if (options.agent.offline && !remotable) {\n    return null\n  }\n\n  options.port = options.port || 8088\n\n  var q = {\n    name: 'socket_server',\n    message: 'Which socket server would you wanna connect to',\n    type: 'list',\n    choices: []\n  }\n  var wrapLocal = function () {\n    return {\n      value: (options.agent && options.agent.authorization ? options.agent.authorization + '@' : '') + '127.0.0.1:' + options.port,\n      short: 'localhost'\n    }\n  }\n  if (!remotable) {\n    q.choices = [wrapLocal()]\n    return q\n  }\n  var maxShortLength = 0\n  for (var remote in options.remotes) {\n    var connectionString = options.remotes[remote]\n    q.choices.push({\n      value: connectionString,\n      short: remote\n    })\n    maxShortLength = Math.max(maxShortLength, remote.length)\n  }\n  if (!options.agent.offline) {\n    var conn = wrapLocal()\n    q.choices.push(conn)\n    maxShortLength = Math.max(maxShortLength, conn.short.length)\n  }\n\n  if (q.choices.length > 1) {\n    q.choices.forEach(function (c) {\n      c.name = '[' + c.short + Array(maxShortLength - c.short.length + 1).join(options.blank || ' ') + '] '\n    })\n  }\n\n  return q\n}\n\n/**\n * Convert connection object to string.\n * @param  {Object} connection\n * @return {String}\n */\nMonitor.toConnectionString = function (connection) {\n  var uri = (connection.protocol || 'http:') + '//' + (connection.hostname || '127.0.0.1') + ':' + connection.port +\n    (connection.path || '') + (connection.namespace || '')\n\n  if (connection.authorization) {\n    uri += (uri.indexOf('?') > 0 ? '&' : '?') + 'auth=' + connection.authorization\n  }\n  return uri\n}\n\n/**\n * Parse connection string to an uri object.\n * @param  {String} connectionString\n * @return {Object}\n */\nMonitor.parseConnectionString = function (connectionString) {\n  var connection = {\n    port: 8088,\n    hostname: '127.0.0.1',\n    authorization: ''\n  }\n  var lastAt = connectionString.lastIndexOf('@')\n  if (lastAt >= 0) {\n    connection.authorization = connectionString.slice(0, lastAt)\n    connectionString = connectionString.slice(lastAt + 1)\n  }\n  if (!/^https?:\\/\\//i.test(connectionString)) {\n    connectionString = 'http://' + connectionString\n  }\n\n  if (connectionString) {\n    connectionString = url.parse(connectionString)\n    connection.hostname = connectionString.hostname\n    connection.port = connectionString.port\n    connection.path = (connectionString.path || '').replace(/^\\/+/, '')\n    connection.protocol = connectionString.protocol\n  }\n  return connection\n}\n\nObject.defineProperty(Monitor.prototype, 'sockio', {\n  set: function (io) {\n    if (this._sockio) {\n      this._sockio.close()\n    }\n    this._sockio = io\n    this._listeningSocketIO()\n  },\n  get: function () {\n    return this._sockio\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/pm.js":"var spawn = require('child_process').spawn\nvar fs = require('fs')\nvar _ = require('lodash')\nvar async = require('async')\nvar rpc = require('pm2-axon-rpc')\nvar axon = require('pm2-axon')\n\n/**\n * Forever lib.\n * @type {{}}\n */\nvar pm = module.exports = {}\n\nvar re_blank = /^[\\s\\r\\t]*$/\nvar allowedEvents = ['start', 'restart', 'exit', 'online']\n\n/**\n * Subscribe event BUS.\n * @param {String} sockPath\n * @param {Function} cb\n * @param {Object} context\n */\npm.sub = function (sockPath, cb, context) {\n  var sub = axon.socket('sub-emitter')\n  // Once awake from sleeping.\n  sub.on('log:*', function (e, d) {\n    // Do not subscribe it.\n    sub.off('log:*')\n    d.event = 'awake'\n    cb.call(context, d)\n  })\n\n  // Process events.\n  sub.on('process:*', function (e, d) {\n    if (d && !!~allowedEvents.indexOf(d.event)) {\n      cb.call(context, d)\n    }\n  })\n  sub.connect(sockPath)\n  return sub\n}\n\n/**\n * Get PM2 version.\n * @param {String} sockPath\n * @param {Function} cb\n */\npm.version = function (sockPath, cb) {\n  pm._rpc({\n    sockPath: sockPath,\n    events: [\n      ['getVersion', {}, cb]\n    ]\n  })\n}\n\n/**\n * List available processes.\n * @param {String} sockPath\n * @param {Function} cb\n * @param {Object} context\n */\npm.list = function (sockPath, cb, context) {\n  if (!fs.existsSync(sockPath)) {\n    return cb.call(context, [])\n  }\n  pm._rpc({\n    sockPath: sockPath,\n    events: [\n      ['getMonitorData', {}, cb]\n    ],\n    context: context || this\n  })\n}\n\n/**\n * Execute remote RPC events.\n * @param {Object} opts including:\n *  {String} sockPath\n *  {Object} context\n *  {Object} args\n *  {Object} events\n *    key: event name\n *    value: callback function\n * @private\n */\npm._rpc = function (opts) {\n  var req = axon.socket('req')\n  var rpcSock = req.connect(opts.sockPath)\n  var rpcClient = new rpc.Client(req)\n\n  // Connect RPC server.\n  rpcSock.on('connect', function () {\n    // Execute request.\n    var waterfalls = opts.events.map(function (event) {\n      return function (next) {\n        var cb = typeof event[event.length - 1] === 'function' ? event.pop() : null\n        if (cb) {\n          event.push(function () {\n            // Wrap arguments, no [].slice (avoid leak)!!!\n            var args = new Array(arguments.length)\n            for (var i = 0; i < args; i++) {\n              args[i] = arguments[i]\n            }\n            cb.apply(opts.context, arguments)\n            next()\n          })\n        }\n        rpcClient.call.apply(rpcClient, event)\n        if (!cb) {\n          next()\n        }\n      }\n    })\n    async.waterfall(waterfalls, function () {\n      rpcSock.close()\n    })\n  })\n}\n\n/**\n * Find process by pm_id.\n * @param {String} sockPath\n * @param {String} id\n * @param {Function} cb\n * @private\n */\npm._findById = function (sockPath, id, cb) {\n  pm.list(sockPath, function (err, procs) {\n    if (err) {\n      return cb(err)\n    }\n    if (!procs || procs.length === 0) {\n      return cb(new Error('No PM2 process running, the sockPath is \"' + sockPath + '\", please make sure it is existing!'))\n    }\n\n    var proc = _.find(procs, function (p) {\n      return p && p.pm_id === id\n    })\n\n    if (!proc) {\n      return cb(new Error('Cannot find pm process by pm_id: ' + id))\n    }\n\n    cb(null, proc)\n  }, true)\n}\n\n/**\n * Trigger actions of process by pm_id.\n * @param {String} sockPath\n * @param {String} id\n * @param {Function} cb\n */\npm.action = function (sockPath, action, id, cb) {\n  if (id === 'all') {\n    pm.list(sockPath, function (err, procs) {\n      if (err) {\n        return cb(err)\n      }\n      if (!procs || procs.length === 0) {\n        return cb(new Error('No PM2 process running, the sockPath is \"' + sockPath + '\", please make sure it is existing!'))\n      }\n\n      async.map(procs, function (proc, next) {\n        pm._actionByPMId(sockPath, proc, action, next.bind(null, null))\n      }, cb)\n    })\n  } else {\n    pm._findById(sockPath, id, function (err, proc) {\n      if (err) {\n        return cb(err)\n      }\n      pm._actionByPMId(sockPath, proc, action, cb)\n    })\n  }\n}\n\n/**\n * Trigger actions of process by pm_id.\n * @param {String} sockPath\n * @param {Object} proc\n * @param {String} action\n * @param {Function} cb\n * @private\n */\npm._actionByPMId = function (sockPath, proc, action, cb) {\n  var noBusEvent = action === 'delete' && proc.pm2_env.status !== 'online'\n  var pmId = proc.pm_id\n\n  action += 'ProcessId'\n  var watchEvent = ['stopWatch', action, {\n    id: pmId\n  }, function () {}]\n\n  if (!!~['restart'].indexOf(action)) { // eslint-disable-line no-extra-boolean-cast\n    watchEvent.splice(0, 1, 'restartWatch')\n    watchEvent.pop()\n  }\n\n  var actionEvent = [action, pmId, function (err, sock) {\n    cb(err, noBusEvent)\n  }]\n\n  if (action === 'restartProcessId') {\n    actionEvent.splice(1, 1, {\n      id: pmId\n    })\n  }\n\n  pm._rpc({\n    sockPath: sockPath,\n    events: [\n      watchEvent,\n      actionEvent\n    ]\n  })\n}\n\n/**\n * Tail logs.\n * @param {Object} opts\n * @param {Function} each Iterator\n * @param {Function} cb\n * @returns {*}\n */\npm.tail = function (opts, each, cb) {\n  // Fetch the proccess that we need.\n  pm._findById(opts.sockPath, opts.pm_id, function (err, proc) {\n    if (err) {\n      return cb(err)\n    }\n    proc.pm2_log = opts.logPath\n    // Tail logs.\n    cb(null, pm._tailLogs(proc, each))\n  })\n}\n/**\n * Use linux `tail` command to grep logs.\n * @param {Object} proc\n * @param {Function} cb\n * @returns {*}\n * @private\n */\npm._tailLogs = function (proc, cb) {\n  var logs = {\n    'pm2': proc.pm2_log\n  }\n  if (proc.pm_log_path) {\n    logs.entire = proc.pm2_env.pm_log_path\n  } else {\n    if (proc.pm2_env.pm_out_log_path) {\n      logs.out = proc.pm2_env.pm_out_log_path\n    }\n    if (proc.pm2_env.pm_err_log_path) {\n      logs.err = proc.pm2_env.pm_err_log_path\n    }\n  }\n\n  var logFiles = []\n  for (var key in logs) {\n    var file = logs[key]\n    if (fs.existsSync(file)) {\n      logFiles.push(file)\n    }\n  }\n  if (logFiles.length === 0) {\n    return null\n  }\n  var tail = spawn('tail', ['-n', 20, '-f'].concat(logFiles), {\n    killSignal: 'SIGTERM',\n    detached: true,\n    stdio: ['ignore', 'pipe', 'pipe']\n  })\n\n  // Use utf8 encoding.\n  tail.stdio.forEach(function (stdio) {\n    stdio && stdio.setEncoding('utf8')\n  })\n\n  // stdout.\n  tail.stdout.on('data', function (data) {\n    var lines = []\n    data.split(/\\n/).forEach(function (line) {\n      if (!re_blank.test(line)) {\n        lines.push(line)\n      }\n    })\n    if (lines.length > 0) {\n      cb(null, lines)\n    }\n  })\n\n  // handle error.\n  tail.stderr.on('data', function (data) {\n    console.error(data.toString())\n    tail.disconnect()\n    cb(new Error(data.toString().replace(/\\n/, '')))\n  })\n  tail.unref()\n  return tail\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/stat.js":"var os = require('os')\n\n/**\n * System states\n * @type {{hostname: *, platform: *, arch: *, release: *, cpus, uptime, memory}}\n */\nvar stat = module.exports = {\n  /**\n   * Hostname, e.g.: localhost, TjatseMacProBook.local...\n   */\n  hostname: os.hostname(),\n  /**\n   * Platform, e.g.: darwin, win32, linux...\n   */\n  platform: os.platform(),\n  /**\n   * Architecture, e.g.: 64, 32...\n   */\n  arch: os.arch(),\n  /**\n   * Ver number of system.\n   */\n  release: os.release(),\n  /**\n   * List all CPUs.\n   * @returns {*}\n   */\n  get cpus () {\n    return os.cpus()\n  },\n  /**\n   * Uptime.\n   * @returns {*}\n   */\n  get uptime () {\n    return os.uptime()\n  },\n  /**\n   * System memory usage.\n   * @returns {{free: *, total: *, percentage: number}}\n   */\n  get memory () {\n    return {\n      free: os.freemem(),\n      total: os.totalmem(),\n      percentage: Math.round(100 * (1 - os.freemem() / os.totalmem()))\n    }\n  }\n}\n\n/**\n * System CPU usage percentage (total).\n * @param fn\n * @param context\n */\nstat.cpuUsage = function (fn, context) {\n  setTimeout(function (ctx, stat1) {\n    var stat2 = ctx.cpuInfo()\n    var perc = 100 * (1 - (stat2.idle - stat1.idle) / (stat2.total - stat1.total))\n    fn.call(context, null, perc.toFixed(2))\n  }, 1000, this, this.cpuInfo())\n}\n\n/**\n * System CPU usage detail information.\n * @returns {{idle: number, total: number}}\n */\nstat.cpuInfo = function () {\n  var cpus = this.cpus\n  var idle = 0\n  var total = 0\n  for (var i in cpus) {\n    idle += cpus[i].times.idle\n    for (var k in cpus[i].times) {\n      total += cpus[i].times[k]\n    }\n  }\n  return {\n    'idle': idle,\n    'total': total\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/util/conf.js":"var fs = require('fs')\nvar _ = require('lodash')\n\nvar re_comment = /^\\s*;/\nvar re_setion = /^\\s*\\[([^\\]]+)\\]\\s*$/\nvar re_kv = /^([^=]+)=(.*)$/\nvar re_boolean = /^(true|false)$/i\n\n/**\n * Namespaces of socket.io\n * @type {{SYS: string, LOG: string, PROC: string}}\n */\nexports.NSP = {\n  SYS: '/sys',\n  LOG: '/log',\n  PROC: '/proc'\n}\n\n/**\n * Configurations\n * @type {[type]}\n */\nexports.File = File\n\n/**\n * Configurations store in a disk file.\n * @param {Object} options\n * @constructor\n */\nfunction File (options) {\n  if (!(this instanceof File)) {\n    return new File(options)\n  }\n\n  if (typeof options === 'string') {\n    options = {\n      file: options\n    }\n  }\n  options = _.assign({}, options || {})\n  if (!options.file) {\n    throw new Error('`file` is required.')\n  }\n  Object.freeze(options)\n  this.options = options\n}\n\n/**\n * Load data from file (sync).\n */\nFile.prototype.loadSync = function () {\n  if (!fs.existsSync(this.options.file)) {\n    this._data = {}\n    return this\n  }\n\n  var json = {}\n  var sec\n  fs.readFileSync(this.options.file, {\n    encoding: 'utf8'\n  }).split(/[\\r\\n]/).forEach(function (line) {\n    // Empty line.\n    if (!line) {\n      sec = null\n      return\n    }\n    // Remove comments.\n    if (re_comment.test(line)) {\n      return\n    }\n    var ms\n    // Sections.\n    if ((ms = line.match(re_setion)) && ms.length === 2) {\n      json[sec = ms[1].trim()] = {}\n      return\n    }\n\n    // Key-value pairs.\n    if ((ms = line.match(re_kv)) && ms.length === 3) {\n      var key = ms[1].trim()\n      var value = ms[2].trim()\n      // Parse boolean and number.\n      if (!isNaN(value)) {\n        value = parseFloat(value)\n      } else if (re_boolean.test(value)) {\n        value = value.toLowerCase() === 'true'\n      }\n      if (sec) {\n        json[sec][key] = value\n      } else {\n        json[key] = value\n      }\n    }\n  })\n\n  this._data = json\n  return this\n}\n\n/**\n * Save data to a disk file (sync).\n * @returns {File}\n */\nFile.prototype.saveSync = function () {\n  function wrapValue (key, value) {\n    return key + ' = ' + (typeof value === 'string' ? value : JSON.stringify(value)) + '\\n'\n  }\n  var ini = ''\n  for (var key in this._data) {\n    var value = this._data[key]\n    // TODO: Array type.\n    if (typeof value === 'object') {\n      ini += '[ ' + key + ' ]\\n'\n      for (var subKey in value) {\n        ini += wrapValue(subKey, value[subKey])\n      }\n      ini += '\\n'\n    }\n    ini += wrapValue(key, value)\n  }\n  fs.writeFileSync(this.options.file, ini)\n  return this\n}\n\n/**\n * Get data.\n * @returns {{}|*}\n */\nFile.prototype.valueOf = function () {\n  return this._data\n}\n\n/**\n * Get/set/remove key-value pairs.\n * @param {String} key\n * @param {Mixed} value\n * @param {Mixed} def\n * @returns {*}\n */\nFile.prototype.val = function (key, value, def) {\n  if (!key) {\n    return\n  }\n  // Load config from File.\n  this.loadSync()\n\n  if (typeof value === 'undefined') {\n    // Get config.\n    return this._data[key]\n  } else if (value == null) {\n    // Clear config.\n    delete this._data[key]\n    // Reset to default if necessary.\n    if (typeof def !== 'undefined') {\n      this._data[key] = def\n    }\n    return this.saveSync()\n  }\n\n  this._data[key] = value\n\n  // Save it.\n  this.saveSync()\n  return this\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/util/log.js":"var chalk = require('chalk')\n\nmodule.exports = function (options) {\n  options = options || {}\n  var lev = options.level\n  var hacks = ['debug', 'log', 'info', 'warn', 'error']\n\n  if ((typeof lev === 'string' && typeof (lev = hacks.indexOf(lev)) === 'undefined') || (isFinite(lev) && (lev < 0 || lev > hacks.length))) {\n    options.level = 0\n  }\n  options.level = !isNaN(lev) ? lev : 0\n\n  console.__level = options.level\n\n  if (console.__hacked) {\n    return\n  }\n\n  var colors = ['grey', '', 'green', 'yellow', 'red']\n  var consoled = {}\n\n  hacks.forEach(function (method) {\n    if (method === 'debug') {\n      consoled.debug = console.log\n      return\n    }\n    consoled[method] = console[method]\n  })\n\n  hacks.forEach(function (method, index) {\n    console[method] = function () {\n      if (index < console.__level) {\n        return\n      }\n      if (method !== 'log' && arguments.length > 0) {\n        arguments[0] = (options.prefix ? chalk.bold[colors[index]]('[' + method.toUpperCase() + '] ') : '') +\n        (options.date ? (new Date()).toLocaleString() + ' ' : '') + arguments[0]\n      }\n      consoled[method].apply(console, arguments)\n    }\n  })\n\n  console.__hacked = true\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/web/index.js":"var express = require('express')\nvar session = require('express-session')\nvar path = require('path')\nvar http = require('http')\nvar router = require('../lib/util/router')\n\nmodule.exports = runServer\n\nfunction runServer (options) {\n  var app = express()\n  app.set('view engine', 'jade')\n  app.set('views', path.join(__dirname, 'templates/views'))\n  app.use(express.static(path.join(__dirname, 'public')))\n  app.use(session({\n    secret: 'pm2@gui',\n    resave: false,\n    saveUninitialized: true\n  }))\n  if (options.middleware) {\n    app.use(options.middleware)\n  }\n  router(app)\n\n  var server = http.Server(app)\n  server.listen(options.port)\n  return server\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/util/router.js":"var path = require('path')\nvar fs = require('fs')\n\nvar routes = []\n\n// bind actions.\nglobal.action = function (method, path, func) {\n  if (typeof method === 'function') {\n    func = method\n    method = 'get'\n    path = func.name\n  } else if (typeof path === 'function') {\n    func = path\n    path = func.name\n  }\n  if (typeof method !== 'string' || typeof path !== 'string' || typeof func !== 'function') {\n    throw new Error('Arguments of action() should be one of `[FUNCTION]` / `[METHOD], [FUNCTION]` / `[METHOD], [PATH], [FUNCTION]`.')\n  }\n  routes.push({\n    method: method,\n    path: '/' + (!!~['index', 'home', 'main'].indexOf(__route_root) ? '' : __route_root) + (path ? '/' + path : ''), // eslint-disable-line no-extra-boolean-cast, no-undef\n    fn: func\n  })\n}\n\nvar _cwd = path.resolve(__dirname, '../../', 'web/routes')\n// initialize.\nmodule.exports = function (server) {\n  fs.readdirSync(_cwd).forEach(function (f) {\n    if (path.extname(f) !== '.js') {\n      return\n    }\n    global.__route_root = path.basename(f, '.js')\n    require(path.resolve(_cwd, f))\n    delete global.__route_root\n  })\n  routes.forEach(function (route) {\n    route.path = route.path.replace(/\\/+/g, '/')\n    server[route.method](route.path, route.fn)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/blessed-widget/layout.js":"var blessed = require('blessed')\nvar chalk = require('chalk')\nvar async = require('async')\nvar _ = require('lodash')\nvar widgets = require('./widgets')\nvar conf = require('../util/conf')\nvar Log = require('../util/log')\n\nmodule.exports = Layout\n\nvar exiting = false\n/**\n * Create layout.\n * @param {Object} options\n */\nfunction Layout (options) {\n  if (!(this instanceof Layout)) {\n    return new Layout(options)\n  }\n  options = _.clone(options || {})\n  if (!options.hostname) {\n    options.hostname = '127.0.0.1'\n  }\n  if (!options.port) {\n    throw new Error('Port of socket.io server is required!')\n  }\n  options.sockets = options.sockets || {}\n  this.options = options\n  this._eles = {}\n  this._procCount = 0\n}\n\n/**\n * Render GUI.\n */\nLayout.prototype.render = function (monitor) {\n  var self = this\n  var options = this.options\n\n  // Preparing all socket.io clients.\n  async.series(Object.keys(conf.NSP).map(function (ns) {\n    return function (callback) {\n      var callbackOnce = _.once(callback)\n      var nsl = ns.toLowerCase()\n      if (options.sockets[nsl]) {\n        return callbackOnce()\n      }\n\n      monitor.connect(_.extend({\n        namespace: conf.NSP[ns]\n      }, options), function (socket) {\n        console.info('Connected to', socket.nsp)\n        callbackOnce(null, socket)\n      }, function (err, socket) {\n        if (err) {\n          return callbackOnce(new Error('Failed to connect to [' + ns + '] due to ' + err.message))\n        }\n      })\n    }\n  }), function (err, res) {\n    if (err) {\n      console.error(err.message)\n      return process.exit(0)\n    }\n    Log({\n      level: 1000\n    })\n    var connectedSockets = {}\n    res.forEach(function (socket) {\n      connectedSockets[socket.nsp.replace(/^\\/+/g, '')] = socket\n    })\n    self.sockets = _.extend(connectedSockets, options.sockets)\n    delete options.sockets\n\n    self._observe()\n    self._draw()\n\n    setInterval(function () {\n      self._bindProcesses()\n    }, 1000)\n  })\n}\n\n/**\n * Observe socket.io events.\n */\nLayout.prototype._observe = function () {\n  var self = this\n  console.info('Listening socket events...')\n  var socketSys = this._socket(conf.NSP.SYS)\n  socketSys.on('procs', function (procs) {\n    self._procs = {\n      data: procs,\n      tick: Date.now()\n    }\n    if (typeof self._procs === 'undefined') {\n      self._bindProcesses()\n    }\n  })\n  socketSys.emit('procs')\n\n  this._socket(conf.NSP.PROC).on('proc', function (proc) {\n    if (!self._usages || proc.pid !== self._usages.pid || self._usages.time === proc.time) {\n      return\n    }\n    self._usages.time = proc.time\n    self._usages.cpu.shift()\n    self._usages.cpu.push(Math.min(100, Math.max(proc.usage.cpu, 1)))\n    self._usages.mem.shift()\n    self._usages.mem.push(Math.min(100, Math.max(proc.usage.memory, 1)))\n  })\n\n  this._socket(conf.NSP.LOG).on('log', function (log) {\n    if (!self._eles.logs || self._lastLogPMId !== log.pm_id) {\n      return\n    }\n    self._eles.logs.log(log.msg)\n  })\n}\n\n/**\n * Bind processes to table.\n */\nLayout.prototype._bindProcesses = function () {\n  if (exiting || !this._eles.processes || !this._procs) {\n    return\n  }\n  if (this._procs.tick === this._procsLastTick) {\n    // Update tick only.\n    return setRows.call(this, true)\n  }\n\n  if (typeof this._procsLastTick === 'undefined') {\n    this._describeInfo(0)\n    this._eles.processes.rows.on('select', onSelect.bind(this))\n  }\n\n  this._procsLastTick = this._procs.tick\n\n  setRows.call(this, true)\n\n  function setRows (forceRefresh) {\n    var rows = []\n    var selectedIndex = this._eles.processes.rows.selected\n    var len = this._procs.data.length\n\n    this._procs.data.forEach(function (p, i) {\n      var pm2 = p.pm2_env\n      var index = '[' + i + '/' + len + ']'\n      rows.push([\n        ' ' + chalk.grey((index + Array(8 - index.length).join(' '))) + ' ' + p.name,\n        pm2.restart_time,\n        pm2.status !== 'online' ? '0s' : _fromNow(Math.ceil((Date.now() - pm2.pm_uptime) / 1000), true),\n        pm2.status === 'online' ? chalk.green('✔') : chalk.red('✘')\n      ])\n    })\n    this._eles.processes.setData({\n      headers: [' Name', 'Restarts', 'Uptime', ''],\n      rows: rows\n    })\n\n    selectedIndex = typeof selectedIndex !== 'undefined' ? selectedIndex : 0\n    var maxIndex = this._eles.processes.rows.items.length - 1\n    if (selectedIndex > maxIndex) {\n      selectedIndex = maxIndex\n    }\n    this._eles.processes.rows.select(selectedIndex)\n\n    if (forceRefresh) {\n      onSelect.call(this)\n    }\n  }\n\n  function onSelect (item, selectedIndex) {\n    if (!!item) { // eslint-disable-line no-extra-boolean-cast\n      var lastIndex = this._lastSelectedIndex\n\n      this._lastSelectedIndex = selectedIndex\n      if (selectedIndex !== lastIndex) {\n        this._describeInfo(selectedIndex)\n      }\n    }\n    this._cpuAndMemUsage(this._lastSelectedIndex || 0)\n    this._displayLogs(this._lastSelectedIndex || 0)\n    this.screen.render()\n  }\n}\n\n/**\n * Get description of a specified process.\n * @param  {Number} index the selected row index.\n */\nLayout.prototype._describeInfo = function (index) {\n  var pm2 = this._dataOf(index)\n  if (!pm2) {\n    return this._eles.json.setContent(_formatJSON({\n      message: 'There is no process running!'\n    }))\n  }\n  if (pm2.pm2_env && pm2.pm2_env.env) {\n    // Remove useless large-bytes attributes.\n    delete pm2.pm2_env.env['LS_COLORS']\n  }\n  delete pm2.monit\n  this._eles.json.setContent(_formatJSON(pm2))\n}\n\n/**\n * CPU and Memory usage of a specific process\n * @param  {Number} index the selected row index.\n */\nLayout.prototype._cpuAndMemUsage = function (index) {\n  var pm2 = this._dataOf(index)\n  if (!pm2) {\n    return\n  }\n  if (!this._usages) {\n    this._usages = {\n      mem: [],\n      cpu: []\n    }\n    var len = this._eles.cpu.width - 4\n    for (var i = 0; i < len; i++) {\n      this._usages.cpu.push(1)\n      this._usages.mem.push(1)\n    }\n  }\n  if (pm2.pid !== 0 && this._procCount === 2) {\n    this._procCount = -1\n    this._socket(conf.NSP.PROC).emit('proc', pm2.pid)\n  }\n  this._procCount++\n  this._usages.pid = pm2.pid\n\n  this._eles.cpu.setData(this._usages.cpu, 0, 100)\n  this._eles.cpu.setLabel('CPU Usage (' + (this._usages.cpu[this._usages.cpu.length - 1]).toFixed(2) + '%)')\n\n  this._eles.mem.setData(this._usages.mem, 0, 100)\n  this._eles.mem.setLabel('Memory Usage (' + (this._usages.mem[this._usages.mem.length - 1]).toFixed(2) + '%)')\n}\n\n/**\n * Display logs.\n * @param  {Number} index [description]\n * @return {[type]}       [description]\n */\nLayout.prototype._displayLogs = function (index) {\n  var pm2 = this._dataOf(index)\n  if (!pm2 || this._lastLogPMId === pm2.pm_id) {\n    return\n  }\n  this._killLogs()\n  this._socket(conf.NSP.LOG).emit('tail', this._lastLogPMId = pm2.pm_id, true)\n}\n\n/**\n * Kill `tail` process\n * @return {[type]}         [description]\n */\nLayout.prototype._killLogs = function () {\n  if (typeof this._lastLogPMId === 'undefined') {\n    return\n  }\n  this._socket(conf.NSP.LOG).emit('tail_kill', this._lastLogPMId)\n}\n\n/**\n * Get data by index.\n * @param  {Number} index\n * @return {Object}\n */\nLayout.prototype._dataOf = function (index) {\n  if (!this._procs || !Array.isArray(this._procs.data) || index >= this._procs.data.length) {\n    return null\n  }\n  return this._procs.data[index]\n}\n\n/**\n * Draw elements.\n */\nLayout.prototype._draw = function () {\n  console.info('Rendering dashboard...')\n  var self = this\n  var screen = blessed.Screen()\n  screen.title = 'PM2 Monitor'\n\n  var grid = _grid(screen)\n\n  // Processes.\n  this._eles.processes = grid.get(0, 0)\n  this._bindProcesses()\n\n  this._eles.cpu = grid.get(1, 0)\n  this._eles.mem = grid.get(1, 1)\n\n  // Logs.\n  this._eles.logs = grid.get(2, 0)\n\n  // Detail.\n  this._eles.json = grid.get(0, 2)\n  var offset = Math.round(this._eles.json.height * 100 / this._eles.json.getScrollHeight())\n  var dir\n  // Key bindings\n  screen.key('s', function (ch, key) {\n    if (exiting) {\n      return\n    }\n    var perc = Math.min((dir !== 'down' ? offset : 0) + self._eles.json.getScrollPerc() + 5, 100)\n    dir = 'down'\n    self._eles.json.setScrollPerc(perc)\n  })\n  screen.key('w', function (ch, key) {\n    if (exiting) {\n      return\n    }\n    var perc = Math.max(self._eles.json.getScrollPerc() - 5 - (dir !== 'up' ? offset : 0), 0)\n    dir = 'up'\n    self._eles.json.setScrollPerc(perc)\n  })\n\n  screen.key(['escape', 'q', 'C-c'], function (ch, key) {\n    if (exiting) {\n      return\n    }\n    exiting = true\n    this._killLogs()\n    screen.title = 'PM2 Monitor (Exiting...)'\n    screen.destroy()\n    screen.title = ''\n    screen.cursorReset()\n    setTimeout(function () {\n      // clear screen.\n      // process.stdout.write('\\u001B[2J\\u001B[0;0f')\n      process.exit(0)\n    }, 1000)\n  }.bind(this))\n\n  screen.render()\n  this.screen = screen\n}\n\n/**\n * Get socket.io object by namespace\n * @param  {String} ns\n */\nLayout.prototype._socket = function (ns) {\n  if (ns && this.sockets) {\n    return this.sockets[(ns || '').replace(/^\\/+/g, '').toLowerCase()]\n  }\n  return null\n}\n\n/**\n * Grid of screen elements.\n * @param {blessed.Screen} screen\n * @returns {*}\n * @private\n */\nfunction _grid (screen) {\n  var style = {\n    fg: '#013409',\n    label: {\n      bold: true,\n      fg: '#00500d'\n    },\n    border: {\n      fg: '#5e9166'\n    }\n  }\n  // Layout.\n  var grid = widgets.Grid({\n    rows: 3,\n    cols: 3,\n    margin: 0,\n    widths: [25, 25, 50],\n    heights: [35, 10, 55]\n  })\n  // Table of processes\n  grid.set({\n    row: 0,\n    col: 0,\n    colSpan: 2,\n    element: widgets.Table,\n    options: {\n      keys: true,\n      border: {\n        type: 'line'\n      },\n      style: style,\n      label: 'Processes (↑/↓ to move up/down, enter to select)',\n      widths: [35, 15, 20, 15]\n    }\n  })\n  // Sparkline of CPU\n  grid.set({\n    row: 1,\n    col: 0,\n    element: widgets.Sparkline,\n    options: {\n      border: {\n        type: 'line'\n      },\n      style: {\n        fg: '#bc6f0a',\n        label: {\n          bold: true,\n          fg: '#00500d'\n        },\n        border: {\n          fg: '#5e9166'\n        }\n      },\n      label: 'CPU Usage(%)'\n    }\n  })\n\n  // Sparkline of Memory\n  grid.set({\n    row: 1,\n    col: 1,\n    element: widgets.Sparkline,\n    options: {\n      border: {\n        type: 'line'\n      },\n      style: {\n        fg: '#6a00bb',\n        label: {\n          bold: true,\n          fg: '#00500d'\n        },\n        border: {\n          fg: '#5e9166'\n        }\n      },\n      label: 'Memory Usage(%)'\n    }\n  })\n\n  // Logs\n  grid.set({\n    row: 2,\n    col: 0,\n    colSpan: 2,\n    element: widgets.Log,\n    options: {\n      border: {\n        type: 'line'\n      },\n      style: style,\n      label: 'Logs'\n    }\n  })\n\n  // JSON data.\n  grid.set({\n    row: 0,\n    col: 2,\n    rowSpan: 3,\n    element: blessed.ScrollableBox,\n    options: {\n      label: 'Describe Info (w/s to move up/down)',\n      border: {\n        type: 'line'\n      },\n      style: style,\n      keys: true\n    }\n  })\n  grid.draw(screen)\n\n  return grid\n}\n\n/**\n * Pretty json data.\n * @param {Object} data\n * @returns {XML|*|string|void}\n * @private\n */\nfunction _formatJSON (data) {\n  data = JSON.stringify(typeof data !== 'string' ? data : JSON.parse(data), null, 2)\n\n  return data.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (m) {\n    var color = 'blue'\n    if (/^\"/.test(m)) {\n      color = ['magenta', 'green'][/:$/.test(m) ? 0 : 1]\n    } else if (/true|false/.test(m)) {\n      color = 'blue'\n    } else if (/null|undefined/.test(m)) {\n      color = 'blue'\n    }\n    return chalk[color](m)\n  })\n}\n\n/**\n * Wrap tick from now.\n * @param {Float} tick\n * @param {Boolean} tiny show all of it.\n * @returns {string}\n */\nfunction _fromNow (tick, tiny) {\n  if (tick < 60) {\n    return tick + 's'\n  }\n  var s = tick % 60 + 's'\n  if (tick < 3600) {\n    return parseInt(tick / 60) + 'm ' + s\n  }\n  var m = parseInt((tick % 3600) / 60) + 'm '\n  if (tick < 86400) {\n    return parseInt(tick / 3600) + 'h ' + m + (!tiny ? '' : s)\n  }\n  var h = parseInt((tick % 86400) / 3600) + 'h '\n  return parseInt(tick / 86400) + 'd ' + h + (!tiny ? '' : m + s)\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/blessed-widget/widgets.js":"// Inspired by the blessed-contrib, but more powerful and free.\n// (c) Tjatse\n\nvar blessed = require('blessed')\nvar util = require('util')\nvar re_stripANSI = /(?:(?:\\u001b\\[)|\\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\\u001b[A-M]/g\n\nexports.Grid = Grid\nexports.Table = Table\nexports.Sparkline = Sparkline\nexports.Log = Log\n\n/**\n * Grid cells.\n * @param {Object} options\n * @returns {Grid}\n * @constructor\n */\nfunction Grid (options) {\n  if (!(this instanceof Grid)) {\n    return new Grid(options)\n  }\n  options = util._extend({\n    margin: 2\n  }, options || {})\n\n  this.grids = []\n\n  for (var r = 0; r < options.rows; r++) {\n    this.grids[r] = []\n    for (var c = 0; c < options.cols; c++) {\n      this.grids[r][c] = {}\n    }\n  }\n\n  this.options = options\n}\n/**\n * Get instance in the specific row and column.\n * @param {Number} row\n * @param {Number} col\n * @returns {*}\n */\nGrid.prototype.get = function (row, col) {\n  return this.grids[row][col].instance\n}\n/**\n * Set element in the cell.\n * @param ele\n */\nGrid.prototype.set = function (ele) {\n  if (Array.isArray(ele)) {\n    for (var i = 0; i < ele.length; i++) {\n      this.set(ele[i])\n    }\n    return\n  }\n  this.grids[ele.row][ele.col] = util._extend({rowSpan: 1, colSpan: 1}, ele)\n}\n/**\n * Draw grid.\n * @param {blessed.screen} screen\n */\nGrid.prototype.draw = function (screen, rect) {\n  rect = rect || {\n    width: 100,\n    height: 100,\n    top: 0,\n    left: 0\n  }\n  var margin = this.options.margin\n  var widths = this.options.widths || []\n  var heights = this.options.heights || []\n  var cols = this.options.cols\n  var rows = this.options.rows\n\n  if (widths.length !== cols) {\n    var avg = (rect.width - margin) / cols\n    for (var c = 0; c < cols; c++) {\n      widths.push(avg)\n    }\n  }\n  if (heights.length !== rows) {\n    var avg = (rect.height - margin) / rows // eslint-disable-line no-redeclare\n    for (var r = 0; r < rows; r++) {\n      heights.push(avg)\n    }\n  }\n\n  for (var r = 0; r < rows; r++) { // eslint-disable-line no-redeclare\n    for (var c = 0; c < cols; c++) { // eslint-disable-line no-redeclare\n      var ele = this.grids[r][c]\n      if (!ele.element) {\n        continue\n      }\n\n      var factorWidth = (rect.width - margin) / 100\n      var factorHeight = (rect.height - margin) / 100\n      var width = widths.slice(c, c + ele.colSpan).reduce(_reduce) * factorWidth\n      var height = heights.slice(r, r + ele.rowSpan).reduce(_reduce) * factorHeight\n      var top = rect.top + margin / 2 + (r === 0 ? 0 : heights.slice(0, r).reduce(_reduce)) * factorHeight\n      var left = rect.left + margin / 2 + (c === 0 ? 0 : widths.slice(0, c).reduce(_reduce)) * factorWidth\n\n      if (ele.element instanceof Grid) {\n        ele.element.draw(screen, {\n          width: width,\n          height: height,\n          top: top,\n          left: left\n        })\n      } else {\n        screen.append(ele.instance = ele.element(util._extend(ele.options || {}, {\n          top: top + '%',\n          left: left + '%',\n          width: width + '%',\n          height: height + '%'\n        })))\n      }\n    }\n  }\n}\n\n/**\n * Table list.\n * @param {Object} options\n * @returns {Table}\n * @constructor\n */\nfunction Table (options) {\n  if (!(this instanceof Table)) {\n    return new Table(options)\n  }\n\n  this.options = options || {}\n  this.options.tags = true\n\n  blessed.Box.call(this, this.options)\n\n  this.rows = blessed.list(util._extend(this.options.rows || {}, {\n    height: 0,\n    top: 1,\n    width: 0,\n    left: 0,\n    selectedFg: '#fcfbac',\n    selectedBg: '#398cc6',\n    fg: '#333',\n    keys: true\n  }))\n  this.append(this.rows)\n}\n\nutil.inherits(Table, blessed.Box)\n\n/**\n * Inherits from blessed.Box\n */\nTable.prototype.render = function () {\n  this.rows.focus()\n  this.rows.width = this.width - 2\n  this.rows.height = this.height - 4\n  blessed.Box.prototype.render.call(this, this.options)\n}\n\n/**\n * Bind data to Table.\n * @param {Object} data\n */\nTable.prototype.setData = function (data) {\n  var widths = this.options.widths\n  var def = true\n  if (!widths) {\n    widths = 24\n    def = false\n  }\n  var dataToString = function (d) {\n    return d.map(function (s, i) {\n      s = s.toString()\n      var s1 = s.replace(re_stripANSI, '')\n      var size = !def ? widths : widths[i]\n      var len = size - s1.length\n\n      if (len < 0) {\n        s = s1.substr(0, size - 1) + '...'\n      } else {\n        s += Array(len).join(' ')\n      }\n      return s\n    }).join('')\n  }\n\n  var rows = []\n\n  data.rows.forEach(function (d) {\n    rows.push(dataToString(d))\n  })\n  this.setContent('{bold}' + dataToString(data.headers) + '{/bold}')\n  this.rows.setItems(rows)\n}\n\n/**\n * Sparkline.\n * @param {Object} options\n * @returns {Sparkline}\n * @constructor\n */\nfunction Sparkline (options) {\n  if (!(this instanceof Sparkline)) {\n    return new Sparkline(options)\n  }\n\n  this.options = util._extend({\n    chars: ['▂', '▃', '▄', '▅', '▆', '▇', '█'],\n    tags: true,\n    padding: {\n      left: 1,\n      top: 1\n    }\n  }, options || {})\n  blessed.Box.call(this, this.options)\n}\nutil.inherits(Sparkline, blessed.Box)\n\n/**\n * Set data.\n * @param {Array} data\n */\nSparkline.prototype.setData = function (data, min, max) {\n  var chars = this.options.chars\n  max = typeof max === 'undefined' ? Math.max.apply(null, data) : max\n  min = typeof min === 'undefined' ? Math.min.apply(null, data) : min\n  var dis = max - min\n  var len = chars.length - 1\n\n  if (dis === 0) {\n    dis = 1\n  }\n\n  var content = data.map(function (n) {\n    var index = Math.round((n - min) / dis * len)\n    return chars[index]\n  }).join('')\n  this.setContent(content)\n}\n\n/**\n * Log.\n * @param {Object} options\n * @returns {Log}\n * @constructor\n */\nfunction Log (options) {\n  if (!(this instanceof Log)) {\n    return new Log(options)\n  }\n\n  this.options = options || {}\n\n  blessed.ScrollableBox.call(this, this.options)\n\n  this.logs = []\n}\nutil.inherits(Log, blessed.ScrollableBox)\n\n/**\n * Log logs.\n * @param {String} str\n */\nLog.prototype.log = function (str, size) {\n  size = size || this.height\n  this.logs.push(str)\n  var len = this.logs.length - size\n  if (len > 0) {\n    this.logs.splice(0, len)\n  }\n  this.setContent(this.logs.join('\\n'))\n  this.setScrollPerc(100)\n}\n\nfunction _reduce (x, y) {\n  return x + y\n}\n","/home/travis/build/npmtest/node-npmtest-pm2-gui/node_modules/pm2-gui/lib/daemon.js":"var chalk = require('chalk')\nvar path = require('path')\nvar fs = require('fs')\nvar async = require('async')\nvar cp = require('child_process')\nvar fork = cp.fork\nvar spawn = cp.spawn\nvar Monitor = require('./monitor')\nvar Log = require('./util/log')\n\nvar processDirname = path.resolve(__dirname, '../')\nvar confFile = './pm2-gui.ini'\nvar cmd = 'start'\n\nif (process.argv.length > 2) {\n  cmd = process.argv[2]\n}\n\nif (process.argv.length > 3) {\n  confFile = process.argv[3]\n}\n\nconfFile = path.resolve(processDirname, confFile)\n\nif (!fs.existsSync(confFile)) {\n  console.error(chalk.bold(confFile), chalk.red('does not exist!'))\n  process.exit(0)\n} else {\n  var monitor = Monitor({\n    confFile: confFile\n  })\n  var daemonize = monitor.options.daemonize && cmd !== 'mon'\n\n  Log(monitor.options.log)\n\n  var pidfile = path.resolve(processDirname, './pm2-gui.pid')\n\n  var Daemon = {\n    restarts: 0,\n    init: function (next) {\n      process.on('SIGTERM', Daemon.stop)\n      process.on('SIGINT', Daemon.stop)\n      process.on('SIGHUP', Daemon.restart)\n      next && next()\n    },\n    start: function (next) {\n      Daemon.worker = Daemon.fork()\n      next && next()\n    },\n    restart: function () {\n      console.info('Restarting...')\n      Daemon.kill()\n      Daemon.start()\n    },\n    stop: function () {\n      console.info('Stopping...')\n      Daemon.kill()\n      daemonize && fs.existsSync(pidfile) && fs.unlinkSync(pidfile)\n      process.exit(0)\n    },\n    kill: function () {\n      if (Daemon.timer) {\n        clearTimeout(Daemon.timer)\n        Daemon.timer = null\n      }\n      if (Daemon.worker) {\n        Daemon.worker.suicide = true\n        Daemon.worker.kill()\n      }\n    },\n    fork: function () {\n      console.info('Forking slave...')\n      Daemon.timer = null\n      var worker = fork(path.resolve(processDirname, 'pm2-gui.js'), [cmd, confFile, '--color'], {\n        silent: daemonize,\n        env: process.env\n      })\n      worker.on('exit', function (code, signal) {\n        if (code !== 0) {\n          if (Daemon.restarts < 10) {\n            Daemon.restarts++\n            setTimeout(function () {\n              Daemon.restarts--\n            }, 20000)\n          } else {\n            console.error(Daemon.restarts + ' restarts in 20 seconds, view the logs to investigate the crash problem.')\n            return process.exit(0)\n          }\n        }\n        if (!worker.suicide && code !== 0) {\n          Daemon.timer = setTimeout(Daemon.fork, 3000)\n        }\n      })\n\n      worker.on('message', function (message) {\n        if (typeof message === 'object' && message.action) {\n          if (message.action === 'restart') {\n            Daemon.restart()\n          }\n        }\n      })\n\n      var logDir = monitor.options.log.dir\n      var stdout = 'pm2-gui.out'\n      var stderr = 'pm2-gui.err'\n\n      if (!logDir) {\n        logDir = './logs'\n      }\n      logDir = path.resolve(processDirname, logDir)\n      if (!fs.existsSync(logDir)) {\n        fs.mkdirSync(logDir)\n      }\n\n      if (daemonize) {\n        stdout = fs.createWriteStream(path.join(logDir, stdout))\n        stderr = fs.createWriteStream(path.join(logDir, stderr))\n        worker.stdout.pipe(stdout)\n        worker.stderr.pipe(stderr)\n\n        fs.writeFile(pidfile, worker.pid)\n      }\n      return worker\n    },\n    daemonize: function () {\n      if (process.env.daemonized) {\n        console.info('Daemonized with pid [' + process.pid + '].')\n        return\n      }\n      console.info('Spawning daemon...')\n      var args = [].concat(process.argv)\n      args.shift()\n      var env = process.env\n      env.daemonized = true\n      var child = spawn(process.execPath, args, {\n        env: env,\n        detached: false,\n        cwd: processDirname,\n        stdio: ['ignore', process.stdout, process.stderr]\n      })\n      child.unref()\n      process.exit()\n    }\n  }\n\n  if (daemonize) {\n    Daemon.daemonize()\n  }\n\n  process.title = 'pm2-gui daemon ' + confFile\n  async.series([\n    Daemon.init,\n    Daemon.start\n  ], function (err) {\n    if (err) {\n      console.error(err.stack)\n    }\n  })\n}\n"}